*edgy-group.nvim.txt*     For Neovim >= 0.8.0     Last change: 2024 January 23

==============================================================================
Table of Contents                          *edgy-group.nvim-table-of-contents*

1. Features                                         |edgy-group.nvim-features|
2. Limitations                                   |edgy-group.nvim-limitations|
  - Advice                                |edgy-group.nvim-limitations-advice|
3. Requirements                                 |edgy-group.nvim-requirements|
4. Installation                                 |edgy-group.nvim-installation|
5. Usage                                               |edgy-group.nvim-usage|
  - Options                                    |edgy-group.nvim-usage-options|
  - API                                            |edgy-group.nvim-usage-api|
6. Example Setup                               |edgy-group.nvim-example-setup|
  - Statusline                      |edgy-group.nvim-example-setup-statusline|

  




edgy-group.nvim <https://github.com/lucobellic/edgy-group.nvim>extends
edgy.nvim <https://github.com/folke/edgy.nvim> by providing a simple method for
organizing windows within **edgebar** based on their title.


==============================================================================
1. Features                                         *edgy-group.nvim-features*

- Switch between groups of windows within **edgebar**.
- Add a command to navigate through groups of windows.
- Allow the creation of custom icon indicators in the statusline, bufferline, etc.


==============================================================================
2. Limitations                                   *edgy-group.nvim-limitations*

**edgy-group.nvim** does not introduce a new **edgebar** for each position. It
is a simple wrapper around **edgy.nvim** that is used to open and close windows
within the same **edgebar**.

- All **edgy** windows require a unique **title** in order to create groups.
- All **edgy** windows require an **open** command to open each window.
- Opening a window with a function or command call will not automatically switch to the corresponding group.
- Switching between groups always sets the cursor to one of the **edgebar** windows and does not restore the previous cursor position.


ADVICE                                    *edgy-group.nvim-limitations-advice*

- It is preferable to use at least one **pinned** window with the **close_when_all_hidden** option set to **false** in order to prevent the **edgebar** from "blinking" when switching between groups.
    A possible solution would be to wait until at least one window is opened before closing any existing ones.


==============================================================================
3. Requirements                                 *edgy-group.nvim-requirements*

edgy.nvim <https://github.com/folke/edgy.nvim>


==============================================================================
4. Installation                                 *edgy-group.nvim-installation*

Install the plugin using your preferred package manager.

lazy.nvim <%22https://github.com/folke/lazy.nvim%22>

>lua
    {
      "lucobellic/edgy-group.nvim",
      dependencies = {"folke/edgy.nvim"}
      event = "VeryLazy",
      opts = {},
    }
<


==============================================================================
5. Usage                                               *edgy-group.nvim-usage*

You can open and close groups of windows using keymaps, commands, or APIs.


OPTIONS                                        *edgy-group.nvim-usage-options*

>lua
    local default_options = {
      groups = {
        right = {}, -- { icon = '',  titles = { 'Neo-Tree', 'Neo-Tree Buffers' } }
        left = {},
        bottom = {},
        top = {},
      },
      -- configuration for `require('edgy-group.stl.statusline').get_statusline(pos)`
      statusline = {
        -- suffix and prefix separators between icons
        separators = { ' ', ' ' },
        clickable = false, -- enable `open_group` on click
        colored = false, -- enable highlight support
        colors = { -- highlight colors
          active = 'Normal',
          inactive = 'Normal',
        },
      },
    }
<


API                                                *edgy-group.nvim-usage-api*

- **EdgyGroupSelect** select group to open with **vim.ui.select**.
- **EdgyGroupNext position** open next group at given position.
- **EdgyGroupPrev position** open previous group at given position.
- **require(‘edgy-group’).open_group_offset(position, offset)** open group with offset relative to the current group.
- **require(‘edgy-group’).open_group_index(position, index)** open group with index relative to the current position.
- **require(‘edgy-group.stl.statusline’).get_statusline(position)** get a list of string in statusline format for each group icons with optional highlight and click support.


==============================================================================
6. Example Setup                               *edgy-group.nvim-example-setup*


  [!WARNING] Only groups with a provided title will be displayed. A default group
  will not be created if titles from edgy are missing.
Usage of **edgy-group.nvim** to create three groups for the left **edgebar**

>lua
    {
      "lucobellic/edgy-group.nvim",
      event = "VeryLazy"
      dependencies = {"folke/edgy.nvim"}
      keys = {
        {
          '<leader>el',
          function() require('edgy-group').open_group_offset('left', 1) end,
          desc = 'Edgy Group Next Left',
        },
        {
          '<leader>eh',
          function() require('edgy-group').open_group_offset('left', -1) end,
          desc = 'Edgy Group Prev Left',
        },
      },
      opts = {
        groups = {
          left = {
            { icon = '',  titles = { 'Neo-Tree', 'Neo-Tree Buffers' } },
            { icon = '',  titles = { 'Neo-Tree Git' } },
            { icon = '',  titles = { 'Outline' } },
          },
        },
        statusline = {
          separators = { ' ', ' ' },
          clickable = true,
          colored = true,
          colors = {
            active = 'PmenuSel',
            inactive = 'Pmenu',
          },
        },
      }
    }
<


STATUSLINE                          *edgy-group.nvim-example-setup-statusline*

Examplesof how to use **edgy-group.nvim** with bufferline.nvim
<https://github.com/akinsho/bufferline.nvim> and lualine.nvim
<https://github.com/nvim-lualine/lualine.nvim> to add group icons with
highlight and click support.


BUFFERLINE ~

>lua
    {
      "akinsho/bufferline.nvim",
      -- ...
      opts = {
        options = {
          custom_areas = {
            left = function()
              return vim.tbl_map(
                function(item) return { text = item } end,
                require('edgy-group.stl.statusline').get_statusline('left')
              )
            end,
          },
        },
      }
    }
<


LUALINE ~

>lua
    {
      'nvim-lualine/lualine.nvim',
      -- ...
      opts = {
        sections = {
          lualine_c = {
            '%=',
            {
              function() return table.concat(require('edgy-group.stl.statusline').get_statusline('bottom')) end,
            },
          },
        },
      },
    }
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
